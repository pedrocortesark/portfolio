// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P.DAL.EFCore.Context;

namespace WPF.Start.Migrations
{
    [DbContext(typeof(AcademyDbContext))]
    [Migration("20200113162150_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("Common.Lib.Core.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");
                });

            modelBuilder.Entity("P.BL.Models.Exam", b =>
                {
                    b.HasBaseType("Common.Lib.Core.Entity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("TEXT");

                    b.HasIndex("SubjectId");

                    b.HasDiscriminator().HasValue("Exam");
                });

            modelBuilder.Entity("P.BL.Models.Student", b =>
                {
                    b.HasBaseType("Common.Lib.Core.Entity");

                    b.Property<int>("Chair")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dni")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnName("Student_Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("P.BL.Models.StudentExam", b =>
                {
                    b.HasBaseType("Common.Lib.Core.Entity");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Grade")
                        .HasColumnType("REAL");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("StudentExam");
                });

            modelBuilder.Entity("P.BL.Models.StudentSubject", b =>
                {
                    b.HasBaseType("Common.Lib.Core.Entity");

                    b.Property<Guid>("StudentId")
                        .HasColumnName("StudentSubject_StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubjectId")
                        .HasColumnName("StudentSubject_SubjectId")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("StudentSubject");
                });

            modelBuilder.Entity("P.BL.Models.Subject", b =>
                {
                    b.HasBaseType("Common.Lib.Core.Entity");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnName("Subject_Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberStudents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Season")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("Subject");
                });

            modelBuilder.Entity("P.BL.Models.Teacher", b =>
                {
                    b.HasBaseType("Common.Lib.Core.Entity");

                    b.Property<string>("LastName1")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName2")
                        .HasColumnName("Teacher_LastName2")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCredits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnName("Teacher_Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("P.BL.Models.Exam", b =>
                {
                    b.HasOne("P.BL.Models.Subject", null)
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P.BL.Models.StudentExam", b =>
                {
                    b.HasOne("P.BL.Models.Student", null)
                        .WithMany("Exams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P.BL.Models.Subject", b =>
                {
                    b.HasOne("P.BL.Models.Teacher", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
